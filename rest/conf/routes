# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# An example controller showing a sample home page
GET     /                           controllers.HomeController.index
# An example controller showing how to use dependency injection
GET     /count                      controllers.CountController.count
# An example controller showing how to write asynchronous code
GET     /message                    controllers.AsyncController.message

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)

# Date: 2016-08-16
# ReactiveMongo Demo

# Cities
POST            /cities/add         controllers.CityController.create(name: String, population: Int)
POST            /cities/            controllers.CityController.createFromJson
POST            /cities/bulk        controllers.CityController.createBulkFromJson
GET             /cities             controllers.CityController.findByName(name: String)

# Persons
POST            /persons/add        controllers.PersonController.create(name: String, age: Int)
POST            /persons/           controllers.PersonController.createFromJson
POST            /persons/bulk       controllers.PersonController.createBulkFromJson
GET             /persons            controllers.PersonController.findByName(name: String)



# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# TEST PAGE
GET			/test								controllers.Application.test

# AUTHENTICATION
POST		/signin							controllers.AuthController.signIn
POST		/signout						controllers.AuthController.signOut
POST		/signup							controllers.AuthController.signUp

# USERNAMES
GET			/usernames					    controllers.UserController.usernames

# ACCOUNT
GET			/account						controllers.AccountController.info
PUT			/account						controllers.AccountController.update
PUT			/account/password		        controllers.AccountController.updatePassword
DELETE	    /account						controllers.AccountController.delete

# FOLDERS
GET			/folders						controllers.FolderController.list(sort: Option[String], page: Int ?= 1, size: Int ?= 10)
POST		/folders						controllers.FolderController.insert
GET			/folders/:id				    controllers.FolderController.info(id: Long)
PUT			/folders/:id				    controllers.FolderController.update(id: Long)
PUT			/folders/:id/order/:newOrder	controllers.FolderController.updateOrder(id: Long, newOrder: Int)
DELETE	    /folders/:id				    controllers.FolderController.delete(id: Long)

# TASKS
GET			/folders/:id/tasks	            controllers.TaskController.list(id: Long, q: Option[String], done: Option[Boolean], sort: Option[String], page: Int ?= 1, size: Int ?= 10)
POST		/folders/:id/tasks	            controllers.TaskController.insert(id: Long)
GET			/tasks/:id					    controllers.TaskController.info(id: Long)
PUT			/tasks/:id					    controllers.TaskController.update(id: Long)
PUT			/tasks/:id/order/:newOrder	    controllers.TaskController.updateOrder(id: Long, newOrder: Int)
PUT			/tasks/:id/folder/:folder		controllers.TaskController.updateFolder(id: Long, folder: Long)
PUT			/tasks/:id/done			        controllers.TaskController.updateDone(id: Long, done: Boolean = true)
DELETE	    /tasks/:id/done			        controllers.TaskController.updateDone(id: Long, done: Boolean = false)
DELETE	    /tasks/:id			            controllers.TaskController.delete(id: Long)


# SHOW FAKE DB DATA
# Auxiliar to check the FakeDB information. It's only for testing purpose. You should remove it.
GET			/fakeDB							controllers.Application.fakeDB
